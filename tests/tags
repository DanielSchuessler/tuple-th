!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_NAME	hasktags
main	/home/daniel/dev/tuple-th/tests/Test.hs	/^main ::  IO Bool$/;"	ft	line:40
prop_elemTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_elemTuple ::  Int -> Int -> Int -> Int -> Int -> Bool$/;"	ft	line:35
prop_filterTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_filterTuple ::  (Int, Int) -> Bool$/;"	ft	line:16
prop_foldl1Tuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_foldl1Tuple ::  (Int, Int, Int) -> Bool$/;"	ft	line:14
prop_foldlTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_foldlTuple ::  (Int, Int, Int) -> Bool$/;"	ft	line:10
prop_foldr1Tuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_foldr1Tuple ::  (Int, Int, Int) -> Bool$/;"	ft	line:12
prop_foldrTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_foldrTuple ::  (Int, Int, Int) -> Bool$/;"	ft	line:8
prop_mapTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_mapTuple ::  (Char, Char, Char, Char) -> Bool$/;"	ft	line:18
prop_nth	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_nth ::  (Int, Int, Int) -> Bool$/;"	ft	line:20
prop_reindexTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_reindexTuple (x::Int) y z = $(reindexTuple 3 [1,1,0,0]) (x,y,z) == (y,y,x,x)$/;"	fi	line:38
prop_safeTupleFromList	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_safeTupleFromList ::  Int -> Int -> Int -> Bool$/;"	ft	line:28
prop_safeTupleFromList_tooLarge	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_safeTupleFromList_tooLarge ::  Int -> Int -> Int -> Bool$/;"	ft	line:30
prop_safeTupleFromList_tooSmall	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_safeTupleFromList_tooSmall ::  Int -> Int -> Int -> Bool$/;"	ft	line:32
prop_tupleFromList	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_tupleFromList ::  Int -> Int -> Int -> Bool$/;"	ft	line:26
prop_zipTuple	/home/daniel/dev/tuple-th/tests/Test.hs	/^prop_zipTuple ::  (Int, Integer) -> (Char, String) -> Bool$/;"	ft	line:22
